Node * reverse(Node * head){
    Node * prev = NULL;
    Node * curr = head;
    Node * next = NULL;
    
    while( curr != NULL ){
      next = curr -> next;
      curr -> next = prev;
      prev = curr;
      curr = next;
    }
    return prev;
}

void insertAtTail( Node * &head, Node * &tail, int val){
    Node * temp = new Node(val);
    //if list is empty
    if(head == NULL){
      head = temp;
      tail = temp;
      return;
    }
    else{
     tail -> next = temp;
     tail = temp;
    }
}

Node * add( Node* first, Node * second ){
    int carry = 0;
    Node * ansHead = NULL;
    Node * ansTail= NULL;
    
    while( first != NULL || second != NULL || carry != 0){
      int val1=0;
      if(first != NULL)
        val1 = first->data;
        
      int val2 = 0;
      if(second != NULL)
        val2 = second -> data;
        
      int sum = val1 + val2;
      int digit = sum % 10;
      
      //create node and addd in ans ll
      insertAtTail(ansHead, ansTail, digit);
      
      carry = sum/10;
      
      if(first != NULL)
         first = first-> next;
         
      if(second != NULL)
         second = second -> next;
         
    }
    return ansHead;
}


Node * addTwoLists( Node* first, Node * second){
    //step 1 : reverse input ll
    first = reverse(first);
    second = reverse(second);
    
    //step 2 : add 2 ll
    Node * ans = add(first, second);
    
    ans = reverse(ans);
    return ans;
}
