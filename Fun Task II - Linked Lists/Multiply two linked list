Node* reverse(Node* head){
  if(head==NULL || head->next == NULL){
    return head;
  }
  
  Node* prev = NULL;
  Node* curr = head;
  
  while(curr!= NULL){
    Node forw = curr->next;
    curr->next = prev;
    prev = curr;
    curr= forw;
  }
  
  return prev;
}

Node* multiplyLLWithDigit(Node* head, int digit){
  Node* dummy = new Node(-1);
  Node* ac = dummmy; //answwer ka curr
  
  Node* curr = head;
  int carry = 0;
  
  while(curr!=NULL || carry != 0){
    int sum = carry + (curr!=NULL ? curr->data : 0) * digit;
    int digit = sum % 10;
    carry = sum/10;
    
    ac->next = new Node(digit);
    if(curr!=NULL) curr = curr->next;
    ac = ac-> next;
  }
  return dummy->next;
}

void addTwoLinkedList(Node* head, Node* ansItr){
  Node* c1 = head;
  Node* c2 = ansItr;
  
  int carry = 0;
  while(c1!=NULL || carry != 0){
    int sum = carry + (c1 != NULL ? c1 -> data : 0) + (c2 -> next != NULL ? c2->next->data : 0);
    int digit = sum % 10;
    carry = sum/10;
    
    if(c2 -> next != NULL) c2 ->next ->data = digit;
    else c2 -> next = new Node(digit);
    
    if(c1 != NULL) c1 = c1 -> next;
    c2 = c2->next;
}
 
Node* multiplyTwoLL( Node* l1, Node* l2){
  l1 = reverse(l1);
  l2 = reverse(l2);
  
  Node* l2_Itr = l2;
  
  Node* dummy = new Node(-1);
  Node* ansItr = dummy;
  
  while(l2_Itr != NULL){
    Node* prod = multiplyLLWithDigit(l1, l2_Itr->data);
    l2_Itr = l2_Itr -> next;
    
    addTwoLinkedList(prod, ansItr);
    ansItr = ansItr -> next;
  }
  return reverse(dummy -> next);
}
  
  
  
  
