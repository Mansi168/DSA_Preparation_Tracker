class compare{
  public:
  bool operator()(node*a, node*b){
    return a->data > b->data;
  }
};

Node<int> * mergeKLists(vector<Node<int>*> & listArray){
  priority_queue<Node<int>*, vector<Node<int>*>, compare> minHeap;
  
  int k = listArray.size();
  if(k==0){
    return NULL;
  
  //inserting first elements of linked list in min Heap
  for(int i=0; i<k; i++){
    if(listArray[i] != NULL){
      minHeap.push(listArray[i]);
    }
  }
  
  Node<int>* head = NULL;
  Node<int>* tail = NULL;
  
  while(!minHeap.empty()){
    Node<int>* top = minHeap.top();
    minHeap.pop();
    
    if(top->next != NULL){
      minHeap.push(top->next);
    }
    
    if(head==NULL){
      //answer ll is empty
      head=top;
      tail=top;
    else{
      //insert at ll
      tail->next = top;
      tail = top;
    }
  }
  
  return head;
}
    
    
